Add notes in between /* */

Example:
/*
Notes go here
*/

// Project
// =======
#project <projectname>


// Account creation and authentication
// ===================================
#sign-up Email		// TODO: .userEmail #type #hidden #read only

#sign-up Facebook   // TODO:.userFacebook #type Text


#sign-up Google     // TODO:.userGoogle #type Text

#sign-up Username   // TODO:.username #type Text

@ Profiles
.firstName # type Text #optional
.lastName #type Text #optional
.userEmail #type #hidden #read only
.phone #type Phone #optional
.address1 #type Text
.address2 #type Text
.city #type Text
.state #type Text
.zip #type Text
.searchRadius #type Number #optional
.role #type Text
..user







// Roles and User Stories
// ======================
#as <Role> <do something>

@Roles and User Stories

#as Admin add an activity
#given I am on Activities screen
#when I click the "Add Activity "button
#then I am redirected to the "Add Activity"screen
#given I am on the "Add Activity" screen
#when I complete the form
#and I check the "save" button
#then I am redirected to the Activity details screen
#and I see all the data I just entered


# asUser
#given I am on the Profile screen
#given I have entered my first and last name
#given I have entered my address,city,state and phone number
#when I complete the form
#and I have pressed the "save" button
#then I am redirected to the Profile details screen
#and I see the data I have just entered

#given I am on the Activities screen
##then I am redirected to the "Choose Activity"screen
#when I complete the form
#and I check the "save" button
#then I am redirected to the Activity details screen
#and I see all the data I just entered

#given I am on the TimeFrames screen
#given I have chosen my start and end times
#when I complete the form
#and I have pressed the "save" button
#then I am redirected to the Timeframes details screen
#and I see all the data I have entered

#given I am on the BusRoutes screen
#given I have chosen my bus route
#when I complete the form
#and I have pressed the "save" button
#then I am redirected to the BusRoute details screen
#and I see all the data I have entered

#given I am on the Itineraries screen
#given I have chosen my day of the week
#given I have chosen my start and end time
#given I have chosen whether this itinerary will repeat
#and I have pressed the "save" button
#then I am redirected to the Itineraries details screen
#and I see all the data I have entered







Example:
#as User add a new post

Built in unit testing per user story:
#given  // TODO:
#when   // TODO:
#then   // TODO:
#and    // TODO:





// Database
// ========
For MongoDB, the User collection is assumed.

Collection names must be camel-case and plural e.g. Projects.

Properties should be pascalCase and plural when it represents more than one value.

A Profiles table/collection is required. Suggested properties are: firstName, lastName, phone, acceptedTermsAndConditions and customerId. Properties userEmail and role are required.

Every table/collection has a unique, autogenerated ID. In MongoDB, _id for collections and id for sub-schemas.

NOTE: An error will be thrown if a property of type Id is not added for a sub-schema. This will be automatically added in the future.

Property types:
  @<Collection>
  Choice  		// TODO:
  Currency
  Decimal
  Date
  DateTime  	// TODO:
  File  		// TODO:
  Email  		// TODO:
  Id			// No upsert code is generate for this property type.
  Image  		// TODO:
  MultiSelect  	// TODO:
  Note
  Number
  Object  		// TODO:
  Phone  		// TODO:
  Select  		// TODO:
  State  		// TODO:
  String
  Text
  Url			// TODO:
  YesNo

Default document properties that are added to a collections unless the collection is a sub-schema:
  .userId #type String  	// Same as @Users._id
  .createdBy #type String  	// Same as @Users._id
  .createdDate #type Date
  .lastModifiedDate #type Date

@<CollectionNames>				// This signifies a collection
.<propertyName> #type <Type>   	// This signifies a property and it's type
..<Option 1>         			// This signifies an option of a property. Spaces are allowed
..<Option2>
.[<propertyName> #type <Type>]  // This signifies a property array and it's type

NOTE: An option must have as it's previous statement a property definition. That definition must have #type and not #ref and not be #type @

The folowing can be used on the same statement (on the same line) as a property or property array:
  Access Roles:
    #create-roles <Role1,Role2>	// TODO: 	// No spaces for role name and in-between the commas
    #delete-roles <Role1,Role2>	// TODO:
    #read-roles <Role1,Role2>  	// TODO:
	#roles <Role1,Role2>  		// TODO:
    #update-roles <Role1,Role2>	// TODO:
    #upsert-roles <Role1,Role2>	// TODO:

  Property Information:
    #default-value
    #hidden
    #label "Some Label"	// TODO:
    #max
    #min
    #optional
    #read-only  		// Displayed list and details screens but not on upsert
    #regex
    #sign-up-field  	// TODO:
    #type

  Referencing:
	// #key-only is only applicable with #ref and not valid for property arrays.
	// No user input is generated. #key-only, makes the propery a foreign key and checks that the property references a record from @Collections.
	// The referenced @Collections is required to have an _id | id property of #type Id (if @Colelctions is a #sub-schema).
	// When using #key-only, #read-only parameter is automatically added.
    #key-only  // TODO:

	// The generated code is a dropdown with a list of records from @Collections.
	// The referenced @Collections is required to have an _id | id property of #type Id (if @Colelctions is a #sub-schema) and a "name" property of #type Text | String.
	// When using #ref, #type is automatically changed to Id.
    #ref  <@Collections>

#sub-schema  // This implies that this collection does not have the default properties and an "id" property of type String will be added

NOTE: Only generates CRUD code for 1 layer deep nesting.

Example (see also rippl-test.rpl:
@Profiles
.picture #type Image #optional
.firstName #type Text #sign-up-field
.lastName #type Text #sign-up-field
.phone #type Phone #optional #sign-up-field
.userEmail #type Email #hidden

.role #type Text #sign-up-field
..Employer
..Contractor
..Admin

.agreeToTermsAndConditions #type YesNo #hidden

.customerNumber #type Text #optional #hidden
.payPalEmail #type Email #optional

@Collections
.propertyNameOne #type Choice
..optionOne
..option Two

.propertyNameTwo #type Number #optional #read-only
.[propertyArrayOne #type @OtherCollections]

.[propertyArrayTwo #type @OtherCollections]
..optionOne
..optionTwo

.propertyNameThree #ref @OtherCollections
.propertyNameFour #ref @OtherCollections #key-only
.[propertyNameFive #ref @OtherCollections]
.[propertyNameSix #ref @OtherCollections] #key-only

@OtherCollections
.id #type Id
.name #type Text
#sub-schema


// Screens
// =======
#theme <ThemeName>  // TODO:

Themes:
  Blank
  Starter
  Cards


$Home
$MasterLayout
$
$(@)
$(@)Details
$(@)Edit
$(@)Add
$(@)Upsert
#route
$$
#list
#list-row
#button
#link
#icon-edit
#icon-delete
#click-row
#click-button
#click-link
#click-edit
#click-delete
#confirm-delete
#pop-up-modal
#pop-up-modal-edit

Screen types:
- Home
- Details
- List
- Add (can be pop-up modal)
- Edit (can be pop-up modal)
- Upsert (can be pop-up modal)
- ConfirmDelete
- Other
